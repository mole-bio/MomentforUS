{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/swoosh/Desktop/MomentForUS/ver0.1/front/pages/login.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport { Row, Col } from \"antd\";\nimport UserScreen from \"../components/UserScreen\";\nimport LoginForm from \"../components/LoginForm\";\nimport { useSelector } from \"react-redux\";\n\nvar Login = function Login() {\n  _s();\n\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // 리덕스르 적용하면 아래와 같이 바뀐다\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, state.user.isLoggedIn ? __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }) : __jsx(LoginForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }) // 리덕스를 적용하면 이렇게 props 형태로 넘겨줄 필요도 없다\n  ));\n};\n\n_s(Login, \"877P/f/MnA4yuj3K53yr4WjuRPQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/swoosh/Desktop/MomentForUS/ver0.1/front/pages/login.js"],"names":["React","useState","AppLayout","Row","Col","UserScreen","LoginForm","useSelector","Login","state","user","isLoggedIn"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,MAAzB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA;;AAClB;AACA;AACA,qBAAuBD,WAAW,CAAC,UAACE,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAlC;AAAA,MAAQC,UAAR,gBAAQA,UAAR;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACC,IAAN,CAAWC,UAAX,GACC,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CAGe;AAJlB,GAFF,CADF;AAYD,CAjBD;;GAAMH,K;UAGmBD,W;;;KAHnBC,K;AAmBN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport { Row, Col } from \"antd\";\nimport UserScreen from \"../components/UserScreen\";\nimport LoginForm from \"../components/LoginForm\";\nimport { useSelector } from \"react-redux\";\n\nconst Login = () => {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // 리덕스르 적용하면 아래와 같이 바뀐다\n  const { isLoggedIn } = useSelector((state) => state.user);\n\n  return (\n    <div>\n      {/* AppLayout에 들어있는 애들이 children이 된다 */}\n      <Row>\n        {state.user.isLoggedIn ? (\n          <AppLayout />\n        ) : (\n          <LoginForm /> // 리덕스를 적용하면 이렇게 props 형태로 넘겨줄 필요도 없다\n        )}\n      </Row>\n    </div>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}